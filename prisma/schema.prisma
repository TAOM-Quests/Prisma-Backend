generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model answers {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  id_single      Int?
  id_multiple    Int?
  id_connection  Int?
  id_box_sorting Int?
  id_free        Int?

  single      answers_single?      @relation(fields: [id_single], references: [id])
  multiple    answers_multiple?    @relation(fields: [id_multiple], references: [id])
  connection  answers_connection?  @relation(fields: [id_connection], references: [id])
  box_sorting answers_box_sorting? @relation(fields: [id_box_sorting], references: [id])
  free        answers_free?        @relation(fields: [id_free], references: [id])

  questions questions[]
}

model answers_single {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  correct_answers Int
  options         String[]

  answers answers[]
}

model answers_multiple {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  options         String[]
  correct_answers Int[]

  answers answers[]
}

model answers_connection {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  options         String[]
  correct_answers String[]

  answers answers[]
}

model answers_box_sorting {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  options         String[]
  correct_answers Json

  answers answers[]
}

model answers_free {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  correct_answers String

  answers answers[]
}

model comments {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  text        String
  user_id     Int
  entity_name String
  entity_id   Int

  user users @relation(fields: [user_id], references: [id])

  events events[]
}

model complete_quests {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  id_user    Int
  quest_data Json

  user users @relation(fields: [id_user], references: [id])
}

model departments {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name String

  quest_groups           quest_groups[]
  quest_tags             quest_tags[]
  quests                 quests[]
  users                  users[]
  events                 events[]
  event_tags             event_tags[]
  game_wordle            game_wordle[]
  game_wordle_answers    game_wordle_answers[]
  user_experience        user_experience[]
  game_crossword_words   game_crossword_words[]
  game_crossword_answers game_crossword_answers[]
}

model events {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  id_status     Int       @default(1)
  id_department Int
  date          DateTime?
  name          String?
  description   String?
  seats_number  Int?
  id_type       Int?
  id_inspector  Int?
  id_image_file Int?
  places        Json[]
  schedule      Json[]

  status     event_statuses @relation(fields: [id_status], references: [id])
  department departments    @relation(fields: [id_department], references: [id])
  type       event_types?   @relation(fields: [id_type], references: [id])
  image      shared_files?  @relation(fields: [id_image_file], references: [id])
  inspector  users?         @relation(fields: [id_inspector], references: [id])

  inspector_comments comments[]
  files              shared_files_on_events[]
  executors          user_executors_on_events[]
  participants       user_participants_on_events[]
  tags               event_tags[]
}

model event_statuses {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name String

  events events[]
}

model event_types {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name String

  events events[]
}

model event_tags {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name          String
  department_id Int

  department departments @relation(fields: [department_id], references: [id])

  events events[]
}

model game_crossword_words {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  question      String
  word          String
  id_difficulty Int
  department_id Int

  difficulty game_crossword_difficulties @relation(fields: [id_difficulty], references: [id])
  department departments                 @relation(fields: [department_id], references: [id])
}

model game_crossword_difficulties {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name       String
  experience Int

  game_crossword_words   game_crossword_words[]
  game_crossword_answers game_crossword_answers[]
}

model game_crossword_answers {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  day           DateTime @default(now())
  word          String
  question      String
  x             Int
  y             Int
  direction     String
  difficulty_id Int
  department_id Int

  difficulty game_crossword_difficulties @relation(fields: [difficulty_id], references: [id])
  department departments                 @relation(fields: [department_id], references: [id])
}

model game_wordle {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  word          String
  department_id Int

  department departments @relation(fields: [department_id], references: [id])
}

model game_wordle_answers {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  word          String
  day           DateTime @default(now())
  department_id Int

  department departments @relation(fields: [department_id], references: [id])
}

model game_wordle_attempts {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  word    String
  day     DateTime @default(now())
  user_id Int

  user users @relation(fields: [user_id], references: [id])
}

model quests {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  id_department Int
  name          String?
  time          String?
  description   String?
  id_group      Int?
  id_executor   Int
  id_difficult  Int?
  id_image      Int?

  department departments         @relation(fields: [id_department], references: [id])
  difficult  quest_difficulties? @relation(fields: [id_difficult], references: [id])
  group      quest_groups?       @relation(fields: [id_group], references: [id])
  executor   users               @relation(fields: [id_executor], references: [id])
  image      shared_files?       @relation(fields: [id_image], references: [id])

  results   quest_results[]
  tags      quest_tags_on_quests[]
  questions questions[]
}

model quest_difficulties {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name       String
  experience Int

  quests quests[]
}

model quest_groups {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name          String
  id_department Int

  department departments @relation(fields: [id_department], references: [id])

  quests quests[]
}

model quest_results {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name        String
  description String
  min_points  Int
  id_image    Int?
  id_quest    Int

  quest quests        @relation(fields: [id_quest], references: [id], onDelete: Cascade)
  image shared_files? @relation(fields: [id_image], references: [id])
}

model quest_tags {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name          String
  id_department Int

  department departments @relation(fields: [id_department], references: [id])

  quests quest_tags_on_quests[]
}

model quest_tags_on_quests {
  created_at DateTime @default(now())

  id_tag   Int
  id_quest Int

  quest quests     @relation(fields: [id_quest], references: [id], onDelete: Cascade)
  tag   quest_tags @relation(fields: [id_tag], references: [id])

  @@id([id_quest, id_tag])
}

model questions {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  text      String?
  type      String?
  id_quest  Int
  id_answer Int?

  answer answers? @relation(fields: [id_answer], references: [id])
  quest  quests   @relation(fields: [id_quest], references: [id], onDelete: Cascade)
}

model shared_files {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name          String @unique
  original_name String
  extension     String
  size          Int
  path          String

  users              users[]
  events_where_image events[]
  events_where_file  shared_files_on_events[]
  quests             quests[]
  quest_results      quest_results[]
  user_achievements  user_achievements[]
}

model shared_files_on_events {
  created_at DateTime @default(now())

  id_event Int
  id_file  Int

  event events       @relation(fields: [id_event], references: [id])
  file  shared_files @relation(fields: [id_file], references: [id])

  @@id([id_event, id_file])
}

model users {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  email            String    @unique
  id_image_file    Int       @default(1)
  password         String
  id_role          Int?
  id_department    Int?
  token            String    @unique
  birth_date       DateTime?
  first_name       String?
  id_position      Int?
  last_name        String?
  patronymic       String?
  phone_number     String?
  telegram         String?   @unique
  telegram_chat_id Int?
  level_number     Int       @default(1)
  experience       Int       @default(0)

  sex        user_sex?
  department departments?    @relation(fields: [id_department], references: [id])
  image      shared_files    @relation(fields: [id_image_file], references: [id])
  position   user_positions? @relation(fields: [id_position], references: [id])
  role       user_roles?     @relation(fields: [id_role], references: [id])
  level      user_levels     @relation(fields: [level_number], references: [level])

  complete_quests          complete_quests[]
  events_where_inspector   events[]
  events_where_executor    user_executors_on_events[]
  events_where_participant user_participants_on_events[]
  quests                   quests[]
  comments                 comments[]
  achievements             user_achievements[]
  game_wordle_attempts     game_wordle_attempts[]
  user_experience          user_experience[]
}

model user_executors_on_events {
  created_at DateTime @default(now())

  id_executor Int
  id_event    Int

  event    events @relation(fields: [id_event], references: [id])
  executor users  @relation(fields: [id_executor], references: [id])

  @@id([id_event, id_executor])
}

model user_participants_on_events {
  created_at DateTime @default(now())

  id_participant Int
  id_event       Int

  event       events @relation(fields: [id_event], references: [id])
  participant users  @relation(fields: [id_participant], references: [id])

  @@id([id_event, id_participant])
}

model user_positions {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name        String
  description String

  users users[]
}

model user_roles {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name        String
  description String?

  users users[]
}

model user_levels {
  level      Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name       String
  experience Int

  users users[]
}

model user_achievements {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name        String
  description String
  experience  Int
  image_id    Int

  image shared_files @relation(fields: [image_id], references: [id])

  users users[]
}

model user_experience {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  experience    Int
  source        String
  user_id       Int
  department_id Int

  user       users       @relation(fields: [user_id], references: [id])
  department departments @relation(fields: [department_id], references: [id])
}

enum user_sex {
  MALE
  FEMALE
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model answers {
  id             Int                  @id @default(autoincrement())
  id_single      Int
  id_multiple    Int
  id_connection  Int
  id_box_sorting Int
  id_free        Int
  questions_ids  Int[]
  box_sorting    answers_box_sorting?
  connection     answers_connection?
  free           answers_free?
  multiple       answers_multiple?
  single         answers_single?
  questions      questions[]
}

model answers_single {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  Int
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_multiple {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  Int[]
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_connection {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  String[]
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_box_sorting {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  Json
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_free {
  id               Int     @id @default(autoincrement())
  correct_answers  String
  id_parent_answer Int     @unique
  parent_answer    answers @relation(fields: [id_parent_answer], references: [id])
}

model complete_quests {
  id       Int    @id @default(autoincrement())
  id_user  Int
  id_quest Int
  quest    quests @relation(fields: [id_quest], references: [id])
  user     users  @relation(fields: [id_user], references: [id])
}

model departments {
  id               Int            @id @default(autoincrement())
  name             String
  id_users         Int[]
  quest_groups_ids Int[]
  quest_tags_ids   Int[]
  quests_ids       Int[]
  quests           quests[]
  quest_groups     quest_groups[]
  quest_tags       quest_tags[]
  users            users[]
}

model events {
  id               Int                           @id @default(autoincrement())
  name             String
  description      String
  date             DateTime
  executors_ids    Int[]
  participants_ids Int[]
  executors        user_executors_on_events[]
  participants     user_participants_on_events[]
}

model quests {
  id                  Int                    @id @default(autoincrement())
  version             Int
  id_department       Int
  name                String
  id_group            Int
  tags_ids            Int[]
  id_difficult        Int
  result_ids          Int[]
  questions_ids       Int[]
  complete_quests_ids Int[]
  complete_quests     complete_quests[]
  department          departments            @relation(fields: [id_department], references: [id])
  difficult           quest_difficulties     @relation(fields: [id_difficult], references: [id])
  group               quest_groups           @relation(fields: [id_group], references: [id])
  results             quest_results[]
  tags                quest_tags_on_quests[]
  questions           questions[]
}

model quest_difficulties {
  id     Int      @id @default(autoincrement())
  name   String
  quests quests[]
}

model quest_groups {
  id            Int         @id @default(autoincrement())
  name          String
  id_department Int
  quests        quests[]
  department    departments @relation(fields: [id_department], references: [id])
}

model quest_results {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  id_quest    Int
  quest       quests @relation(fields: [id_quest], references: [id])
}

model quest_tags {
  id            Int                    @id @default(autoincrement())
  name          String
  id_department Int
  department    departments            @relation(fields: [id_department], references: [id])
  quests        quest_tags_on_quests[]
}

model quest_tags_on_quests {
  id_tag   Int
  id_quest Int
  quest    quests     @relation(fields: [id_quest], references: [id])
  tag      quest_tags @relation(fields: [id_tag], references: [id])

  @@id([id_quest, id_tag])
}

model questions {
  id        Int             @id @default(autoincrement())
  id_quest  Int
  id_type   Int
  id_answer Int
  answer    answers         @relation(fields: [id_answer], references: [id])
  quest     quests          @relation(fields: [id_quest], references: [id])
  type      questions_types @relation(fields: [id_type], references: [id])
}

model questions_types {
  id        Int         @id @default(autoincrement())
  name      String
  questions questions[]
}

model users {
  id                           Int                           @id @default(autoincrement())
  name                         String?
  surname                      String?
  email                        String                        @unique
  password                     String
  token                        String
  id_role                      Int                           @default(1)
  id_department                Int?
  events_where_executor_ids    Int[]
  events_where_participant_ids Int[]
  complete_quests              complete_quests[]
  department                   departments?                  @relation(fields: [id_department], references: [id])
  role                         user_roles                    @relation(fields: [id_role], references: [id])
  events_where_executor        user_executors_on_events[]
  events_where_participant     user_participants_on_events[]
}

model user_executors_on_events {
  id_executor Int
  id_event    Int
  event       events @relation(fields: [id_event], references: [id])
  executor    users  @relation(fields: [id_executor], references: [id])

  @@id([id_event, id_executor])
}

model user_participants_on_events {
  id_participant Int
  id_event       Int
  event          events @relation(fields: [id_event], references: [id])
  participant    users  @relation(fields: [id_participant], references: [id])

  @@id([id_event, id_participant])
}

model user_roles {
  id    Int     @id @default(autoincrement())
  name  String
  users users[]
}

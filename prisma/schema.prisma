generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model answers {
  id             Int                  @id @default(autoincrement())
  id_single      Int?
  id_multiple    Int?
  id_connection  Int?
  id_box_sorting Int?
  id_free        Int?
  single         answers_single?      @relation(fields: [id_single], references: [id])
  multiple       answers_multiple?    @relation(fields: [id_multiple], references: [id])
  connection     answers_connection?  @relation(fields: [id_connection], references: [id])
  box_sorting    answers_box_sorting? @relation(fields: [id_box_sorting], references: [id])
  free           answers_free?        @relation(fields: [id_free], references: [id])
  questions      quest_questions[]
}

model answers_single {
  id              Int       @id @default(autoincrement())
  correct_answers Int
  options         String[]
  images_ids      Json[]
  answers         answers[]
}

model answers_multiple {
  id              Int       @id @default(autoincrement())
  options         String[]
  images_ids      Json[]
  correct_answers Int[]
  answers         answers[]
}

model answers_connection {
  id              Int       @id @default(autoincrement())
  options         String[]
  images_ids      Json[]
  correct_answers String[]
  answers         answers[]
}

model answers_box_sorting {
  id              Int       @id @default(autoincrement())
  options         String[]
  images_ids      Json[]
  correct_answers Json
  answers         answers[]
}

model answers_free {
  id              Int       @id @default(autoincrement())
  correct_answers String
  answers         answers[]
}

model comments {
  id          Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now())
  user_id     Int
  entity_name String
  entity_id   Int
  user        users    @relation(fields: [user_id], references: [id])
  events      events[]
}

model complete_quests {
  id         Int   @id @default(autoincrement())
  id_user    Int
  quest_data Json
  user       users @relation(fields: [id_user], references: [id])
}

model departments {
  id              Int               @id @default(autoincrement())
  name            String
  quest_groups    quest_groups[]
  quest_tags      quest_tags[]
  quests          quests[]
  users           users[]
  events          events[]
  event_tags      event_tags[]
  user_experience user_experience[]
}

model events {
  id                 Int                           @id @default(autoincrement())
  id_status          Int                           @default(1)
  id_department      Int
  date               DateTime?
  name               String?
  description        String?
  seats_number       Int?
  id_type            Int?
  id_inspector       Int?
  id_image_file      Int?
  places             Json[]
  schedule           Json[]
  inspector_comments comments[]
  status             event_statuses                @relation(fields: [id_status], references: [id])
  department         departments                   @relation(fields: [id_department], references: [id])
  type               event_types?                  @relation(fields: [id_type], references: [id])
  image              shared_files?                 @relation(fields: [id_image_file], references: [id])
  inspector          users?                        @relation(fields: [id_inspector], references: [id])
  files              shared_files_on_events[]
  executors          user_executors_on_events[]
  participants       user_participants_on_events[]
  tags               event_tags[]
}

model event_statuses {
  id     Int      @id @default(autoincrement())
  name   String
  events events[]
}

model event_types {
  id     Int      @id @default(autoincrement())
  name   String
  events events[]
}

model event_tags {
  id            Int         @id @default(autoincrement())
  name          String
  department_id Int
  department    departments @relation(fields: [department_id], references: [id])
  events        events[]
}

model feedback_forms {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  entity_name      String
  entity_id        Int
  questions        Json[]
  feedback_answers feedback_answers[]

  @@unique([entity_name, entity_id])
}

model feedback_answers {
  id      Int            @id @default(autoincrement())
  answers String[]
  user_id Int
  form_id Int
  user    users          @relation(fields: [user_id], references: [id])
  form    feedback_forms @relation(fields: [form_id], references: [id])
}

model quests {
  id            Int                    @id @default(autoincrement())
  id_department Int
  name          String?
  time          String?
  description   String?
  id_group      Int?
  id_executor   Int
  id_difficult  Int?
  id_image      Int?
  results       quest_results[]
  tags          quest_tags_on_quests[]
  questions     quest_questions[]
  department    departments            @relation(fields: [id_department], references: [id])
  difficult     quest_difficulties?    @relation(fields: [id_difficult], references: [id])
  group         quest_groups?          @relation(fields: [id_group], references: [id])
  executor      users                  @relation(fields: [id_executor], references: [id])
  image         shared_files?          @relation(fields: [id_image], references: [id])
}

model quest_difficulties {
  id         Int      @id @default(autoincrement())
  name       String
  experience Int
  quests     quests[]
}

model quest_groups {
  id            Int         @id @default(autoincrement())
  name          String
  id_department Int
  department    departments @relation(fields: [id_department], references: [id])
  quests        quests[]
}

model quest_results {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  min_points  Int
  id_image    Int?
  id_quest    Int
  quest       quests        @relation(fields: [id_quest], references: [id], onDelete: Cascade)
  image       shared_files? @relation(fields: [id_image], references: [id])
}

model quest_tags {
  id            Int                    @id @default(autoincrement())
  name          String
  id_department Int
  department    departments            @relation(fields: [id_department], references: [id])
  quests        quest_tags_on_quests[]
}

model quest_tags_on_quests {
  id_tag   Int
  id_quest Int
  quest    quests     @relation(fields: [id_quest], references: [id], onDelete: Cascade)
  tag      quest_tags @relation(fields: [id_tag], references: [id])

  @@id([id_quest, id_tag])
}

model quest_questions {
  id        Int            @id @default(autoincrement())
  text      String?
  type      String?
  id_quest  Int
  id_answer Int?
  images    shared_files[]
  answer    answers?       @relation(fields: [id_answer], references: [id])
  quest     quests         @relation(fields: [id_quest], references: [id], onDelete: Cascade)
}

model shared_files {
  id                 Int                      @id @default(autoincrement())
  name               String                   @unique
  original_name      String
  extension          String
  size               Int
  path               String
  users              users[]
  events_where_image events[]
  events_where_file  shared_files_on_events[]
  quests             quests[]
  quest_results      quest_results[]
  user_achievements  user_achievements[]
  quest_questions    quest_questions[]
}

model shared_files_on_events {
  id_event Int
  id_file  Int
  event    events       @relation(fields: [id_event], references: [id])
  file     shared_files @relation(fields: [id_file], references: [id])

  @@id([id_event, id_file])
}

model users {
  id                          Int                           @id @default(autoincrement())
  email                       String                        @unique
  id_image_file               Int                           @default(1)
  password                    String
  id_role                     Int?
  id_department               Int?
  token                       String                        @unique
  birth_date                  DateTime?
  first_name                  String?                       @default("Новый")
  id_position                 Int?
  last_name                   String?                       @default("Пользователь")
  patronymic                  String?
  phone_number                String?
  telegram                    String?                       @unique
  telegram_chat_id            Int?
  level_number                Int                           @default(1)
  experience                  Int                           @default(0)
  sex                         user_sex?
  complete_quests             complete_quests[]
  events_where_inspector      events[]
  events_where_executor       user_executors_on_events[]
  events_where_participant    user_participants_on_events[]
  department                  departments?                  @relation(fields: [id_department], references: [id])
  image                       shared_files                  @relation(fields: [id_image_file], references: [id])
  position                    user_positions?               @relation(fields: [id_position], references: [id])
  role                        user_roles?                   @relation(fields: [id_role], references: [id])
  level                       user_levels                   @relation(fields: [level_number], references: [level])
  quests                      quests[]
  comments                    comments[]
  user_experience             user_experience[]
  achievements                user_achievements[]
  feedback_answers            feedback_answers[]
  user_notifications_settings user_notifications_settings[]
}

model user_achievements {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  experience  Int
  image_id    Int
  image       shared_files @relation(fields: [image_id], references: [id])
  users       users[]
}

model user_email_confirm {
  id         Int      @id @default(autoincrement())
  email      String
  code       String
  created_at DateTime @default(now())
}

model user_executors_on_events {
  id_executor Int
  id_event    Int
  event       events @relation(fields: [id_event], references: [id])
  executor    users  @relation(fields: [id_executor], references: [id])

  @@id([id_event, id_executor])
}

model user_experience {
  user_id       Int
  department_id Int
  experience    Int
  user          users       @relation(fields: [user_id], references: [id])
  department    departments @relation(fields: [department_id], references: [id])

  @@id([user_id, department_id])
}

model user_levels {
  level      Int     @id @default(autoincrement())
  name       String
  experience Int
  users      users[]
}

model user_notifications_settings {
  email    Boolean
  telegram Boolean
  type_id  Int
  user_id  Int
  user     users                    @relation(fields: [user_id], references: [id])
  type     user_notifications_types @relation(fields: [type_id], references: [id])

  @@unique([user_id, type_id])
}

model user_notifications_types {
  id                          Int                           @id @default(autoincrement())
  name                        String
  roles                       Int[]
  user_notifications_settings user_notifications_settings[]
}

model user_participants_on_events {
  id_participant Int
  id_event       Int
  event          events @relation(fields: [id_event], references: [id])
  participant    users  @relation(fields: [id_participant], references: [id])

  @@id([id_event, id_participant])
}

model user_positions {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  users       users[]
}

model user_roles {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  users       users[]
}

enum user_sex {
  MALE
  FEMALE
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id           Int               @id @default(autoincrement())
  singleId     Int
  multipleId   Int
  connectionId Int
  boxSortingId Int
  freeId       Int
  questionIds  Int[]
  boxSorting   AnswerBoxSorting?
  connection   AnswerConnection?
  free         AnswerFree?
  multiple     AnswerMultiple?
  single       AnswerSingle?
  questions    Question[]
}

model AnswerSingle {
  id             Int      @id @default(autoincrement())
  answers        String[]
  correctAnswer  Int
  parentAnswerId Int      @unique
  parentAnswer   Answer   @relation(fields: [parentAnswerId], references: [id])
}

model AnswerMultiple {
  id             Int      @id @default(autoincrement())
  answers        String[]
  correctAnswers Int[]
  parentAnswerId Int      @unique
  parentAnswer   Answer   @relation(fields: [parentAnswerId], references: [id])
}

model AnswerConnection {
  id             Int      @id @default(autoincrement())
  answers        String[]
  correctAnswer  String[]
  parentAnswerId Int      @unique
  parentAnswer   Answer   @relation(fields: [parentAnswerId], references: [id])
}

model AnswerBoxSorting {
  id             Int      @id @default(autoincrement())
  answers        String[]
  correctAnswer  Json
  parentAnswerId Int      @unique
  parentAnswer   Answer   @relation(fields: [parentAnswerId], references: [id])
}

model AnswerFree {
  id             Int    @id @default(autoincrement())
  correctAnswer  String
  parentAnswerId Int    @unique
  parentAnswer   Answer @relation(fields: [parentAnswerId], references: [id])
}

model CompleteQuest {
  id      Int   @id @default(autoincrement())
  userId  Int
  questId Int
  quest   Quest @relation(fields: [questId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
}

model Department {
  id            Int          @id @default(autoincrement())
  name          String
  userIds       Int[]
  questGroupIds Int[]
  questTagIds   Int[]
  questsIds     Int[]
  quests        Quest[]
  questGroups   QuestGroup[]
  questTags     QuestTag[]
  users         User[]
}

model Event {
  id              Int                        @id @default(autoincrement())
  name            String
  description     String
  date            DateTime
  executorsIds    Int[]
  participantsIds Int[]
  executors       UserExecutorsOnEvents[]
  participants    UserParticipantsOnEvents[]
}

model Quest {
  id                Int                 @id @default(autoincrement())
  version           Int
  departmentId      Int
  name              String
  groupId           Int
  tagsIds           Int[]
  difficultId       Int
  resultIds         Int[]
  questionsIds      Int[]
  completeQuestsIds Int[]
  completeQuests    CompleteQuest[]
  department        Department          @relation(fields: [departmentId], references: [id])
  difficult         QuestDifficult      @relation(fields: [difficultId], references: [id])
  group             QuestGroup          @relation(fields: [groupId], references: [id])
  results           QuestResult[]
  tags              QuestTagsOnQuests[]
  questions         Question[]
}

model QuestDifficult {
  id     Int     @id @default(autoincrement())
  name   String
  quests Quest[]
}

model QuestGroup {
  id           Int        @id @default(autoincrement())
  name         String
  departmentId Int
  quests       Quest[]
  department   Department @relation(fields: [departmentId], references: [id])
}

model QuestResult {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  questId     Int
  quest       Quest  @relation(fields: [questId], references: [id])
}

model QuestTag {
  id           Int                 @id @default(autoincrement())
  name         String
  departmentId Int
  department   Department          @relation(fields: [departmentId], references: [id])
  quests       QuestTagsOnQuests[]
}

model QuestTagsOnQuests {
  tagId   Int
  questId Int
  quest   Quest    @relation(fields: [questId], references: [id])
  tag     QuestTag @relation(fields: [tagId], references: [id])

  @@id([questId, tagId])
}

model Question {
  id       Int          @id @default(autoincrement())
  questId  Int
  typeId   Int
  answerId Int
  answer   Answer       @relation(fields: [answerId], references: [id])
  quest    Quest        @relation(fields: [questId], references: [id])
  type     QuestionType @relation(fields: [typeId], references: [id])
}

model QuestionType {
  id        Int        @id @default(autoincrement())
  name      String
  questions Question[]
}

model User {
  id                        Int                        @id @default(autoincrement())
  name                      String
  surname                   String
  email                     String
  password                  String
  roleId                    Int
  departmentId              Int
  eventsWhereExecutorIds    Int[]
  eventsWhereParticipantIds Int[]
  completeQuests            CompleteQuest[]
  department                Department                 @relation(fields: [departmentId], references: [id])
  role                      UserRole                   @relation(fields: [roleId], references: [id])
  eventsWhereExecutor       UserExecutorsOnEvents[]
  eventsWhereParticipant    UserParticipantsOnEvents[]
}

model UserExecutorsOnEvents {
  executorId Int
  eventId    Int
  event      Event @relation(fields: [eventId], references: [id])
  executor   User  @relation(fields: [executorId], references: [id])

  @@id([eventId, executorId])
}

model UserParticipantsOnEvents {
  participantId Int
  eventId       Int
  event         Event @relation(fields: [eventId], references: [id])
  participant   User  @relation(fields: [participantId], references: [id])

  @@id([eventId, participantId])
}

model UserRole {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

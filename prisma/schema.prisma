generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model answers {
  id             Int                  @id @default(autoincrement())
  id_single      Int
  id_multiple    Int
  id_connection  Int
  id_box_sorting Int
  id_free        Int
  questions_ids  Int[]
  box_sorting    answers_box_sorting?
  connection     answers_connection?
  free           answers_free?
  multiple       answers_multiple?
  single         answers_single?
  questions      questions[]
}

model answers_single {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  Int
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_multiple {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  Int[]
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_connection {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  String[]
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_box_sorting {
  id               Int      @id @default(autoincrement())
  answers          String[]
  correct_answers  Json
  id_parent_answer Int      @unique
  parent_answer    answers  @relation(fields: [id_parent_answer], references: [id])
}

model answers_free {
  id               Int     @id @default(autoincrement())
  correct_answers  String
  id_parent_answer Int     @unique
  parent_answer    answers @relation(fields: [id_parent_answer], references: [id])
}

model complete_quests {
  id         Int   @id @default(autoincrement())
  id_user    Int
  quest_data Json
  user       users @relation(fields: [id_user], references: [id])
}

model departments {
  id               Int            @id @default(autoincrement())
  name             String
  id_users         Int[]
  quest_groups_ids Int[]
  quest_tags_ids   Int[]
  quests_ids       Int[]
  quest_groups     quest_groups[]
  quest_tags       quest_tags[]
  quests           quests[]
  users            users[]
}

model events {
  id               Int                           @id @default(autoincrement())
  name             String
  description      String
  date             DateTime
  executors_ids    Int[]
  participants_ids Int[]
  id_image_file    Int
  id_inspector     Int
  id_status        Int
  id_type          Int
  places           Json[]
  seats_number     Int
  image            shared_files                  @relation(fields: [id_image_file], references: [id])
  inspector        users                         @relation(fields: [id_inspector], references: [id])
  status           event_statuses                @relation(fields: [id_status], references: [id])
  type             event_types                   @relation(fields: [id_type], references: [id])
  executors        user_executors_on_events[]
  participants     user_participants_on_events[]
}

model event_statuses {
  id     Int      @id @default(autoincrement())
  name   String
  events events[]
}

model event_types {
  id     Int      @id @default(autoincrement())
  name   String
  events events[]
}

model quests {
  id                  Int                    @id @default(autoincrement())
  id_department       Int
  name                String
  id_group            Int
  tags_ids            Int[]
  id_difficult        Int
  result_ids          Int[]
  questions_ids       Int[]
  complete_quests_ids Int[]
  results             quest_results[]
  tags                quest_tags_on_quests[]
  questions           questions[]
  department          departments            @relation(fields: [id_department], references: [id])
  difficult           quest_difficulties     @relation(fields: [id_difficult], references: [id])
  group               quest_groups           @relation(fields: [id_group], references: [id])
}

model quest_difficulties {
  id     Int      @id @default(autoincrement())
  name   String
  quests quests[]
}

model quest_groups {
  id            Int         @id @default(autoincrement())
  name          String
  id_department Int
  department    departments @relation(fields: [id_department], references: [id])
  quests        quests[]
}

model quest_results {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  id_quest    Int
  quest       quests @relation(fields: [id_quest], references: [id])
}

model quest_tags {
  id            Int                    @id @default(autoincrement())
  name          String
  id_department Int
  department    departments            @relation(fields: [id_department], references: [id])
  quests        quest_tags_on_quests[]
}

model quest_tags_on_quests {
  id_tag   Int
  id_quest Int
  quest    quests     @relation(fields: [id_quest], references: [id])
  tag      quest_tags @relation(fields: [id_tag], references: [id])

  @@id([id_quest, id_tag])
}

model questions {
  id        Int             @id @default(autoincrement())
  id_quest  Int
  id_type   Int
  id_answer Int
  answer    answers         @relation(fields: [id_answer], references: [id])
  quest     quests          @relation(fields: [id_quest], references: [id])
  type      questions_types @relation(fields: [id_type], references: [id])
}

model questions_types {
  id        Int         @id @default(autoincrement())
  name      String
  questions questions[]
}

model shared_files {
  id        Int      @id @default(autoincrement())
  name      String
  extension String
  size      String
  path      String
  events    events[]
  users     users[]
}

model users {
  id                           Int                           @id @default(autoincrement())
  email                        String                        @unique
  password                     String
  id_role                      Int?
  id_department                Int?
  events_where_executor_ids    Int[]
  events_where_participant_ids Int[]
  token                        String                        @unique
  birth_date                   DateTime?
  first_name                   String?
  id_image_file                Int?
  id_position                  Int?
  last_name                    String?
  patronymic                   String?
  phone_number                 String?
  sex                          user_sex?
  complete_quests              complete_quests[]
  events_where_inspector       events[]
  events_where_executor        user_executors_on_events[]
  events_where_participant     user_participants_on_events[]
  department                   departments?                  @relation(fields: [id_department], references: [id])
  image                        shared_files?                 @relation(fields: [id_image_file], references: [id])
  position                     user_positions?               @relation(fields: [id_position], references: [id])
  role                         user_roles?                   @relation(fields: [id_role], references: [id])
}

model user_executors_on_events {
  id_executor Int
  id_event    Int
  event       events @relation(fields: [id_event], references: [id])
  executor    users  @relation(fields: [id_executor], references: [id])

  @@id([id_event, id_executor])
}

model user_participants_on_events {
  id_participant Int
  id_event       Int
  event          events @relation(fields: [id_event], references: [id])
  participant    users  @relation(fields: [id_participant], references: [id])

  @@id([id_event, id_participant])
}

model user_positions {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  users       users[]
}

model user_roles {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  users       users[]
}

enum user_sex {
  MALE
  FEMALE
}
